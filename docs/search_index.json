[["index.html", "CBW Bookdown Guide 1 CBW’s Bookdown Documentation", " CBW Bookdown Guide Julia Qiu, Nia Hughes Last Updated: 2025-08-11 1 CBW’s Bookdown Documentation Welcome to CBW’s documentation for creating a workshop website using Bookdown. Bookdown is an R package that is used to build books, and in our case, the websites hosting CBW’s workshops! You will only need to know markdown and whatever coding language you will be using to learn bookdown. Please note: this is the documentation to create a workshop using bookdown. If Jupyter Book suits you better, see here. If you don’t know which one to use, use the following flowchart to help decide: "],["how-bookdown-works.html", "2 How Bookdown Works", " 2 How Bookdown Works Here is a general summary of how Bookdown creates html websites from .Rmd files when you hit Build. Essentially, Knitr renders and runs all the code, and the outputs are converted into markdown. After knitr, we essentially have a bunch of only markdown files. Pandoc translates this markdown into HTML, so that we get a website! It can be helpful to know when and how these packages work, to help debug later on. Note! The Build step is required for changes to be reflected on the website. If you push an update and the site looks the same, you probably forgot to build. "],["rc-cheatsheet.html", "3 RCs: Workshop Setup 3.1 Create your repo on GitHub 3.2 Give your team access 3.3 Set your workshop up locally", " 3 RCs: Workshop Setup This section is a quick reference on setting up GitHub Pages site for workshops. Note that it assumes you’ve already followed the installation instructions. 3.1 Create your repo on GitHub 1. Create your repo Navigate to the bookdown template. Click “Use this template” and then “Create a new repository”. 2. Set your details Repo name = workshop code (e.g. INR_Mon-2510) Visibility = public Save 3. Configure your workshop Open workshop_config.json in your browser and replace all variables. Commit. 4. Deploy From your repo on GitHub, go to Settings &gt; Pages Ensure it is set to “Deploy from a branch” Set branch to “main” Change folder to /docs Save! Check deploy by going to Actions 3.2 Give your team access 5. Set up your faculty team On GitHub’s website, go to the bioinformaticsdotca organization teams page Create a team named as your workshop code (e.g. INR_Mon-2510); leave all settings as their defaults Add your instructors and TAs to the team 6. Give repo access On your repo page on GitHub’s website, navigate to Settings &gt; Collaborators and Teams Click “Add Teams” and select your team Give your team Maintain access 3.3 Set your workshop up locally 7. Clone to your computer On your repo page on GitHub’s website, click the green Code button, ensure SSH is selected, and copy the text in the box On your local machine, open your terminal and navigate to the folder where you store your CBW Github repos Run git clone [THE TEXT YOU JUST COPIED] 8. Finishing touches Open the .Rproj file in the folder you’ve just downloaded Upload your workshop icon to the img/ folder In _output.yml, replace missingimg.png with your icon’s filename Hit “Build Book” and check preview once complete Commit and push 9. Add content Add your pre-work, schedule, and faculty details. When slides and lab materials are ready, include them in their respective modules. "],["editing-cheatsheet.html", "4 Editing Your Workshop", " 4 Editing Your Workshop If you don’t already have your repo cloned: On your repo page on GitHub’s website, click the green Code button, ensure SSH is selected, and copy the text in the box On your local machine, open your terminal and navigate to the folder where you store your CBW Github repos Run git clone [THE TEXT YOU JUST COPIED] Make any changes you like Click Build to create the HTML files that make up the website Commit and push Your website will be ready in 1-2 minutes For more details on this process, see the Reference Materials section below. "],["handy-shortcuts.html", "5 Handy Shortcuts 5.1 Getting to your folder in the terminal 5.2 Opening your folder from the terminal 5.3 Commenting and uncommenting in RStudio", " 5 Handy Shortcuts 5.1 Getting to your folder in the terminal You can use the cd command, or: &nbsp;&nbsp;&nbsp;Windows Method 1: Shift + Right-click * Open Windows File Explorer and navigate to the folder you want to open in the terminal. * Hold down the Shift key and right-click on the folder (or an empty area within the folder). * Select “Open in Terminal” from the context menu. Method 2: Typing “cmd” in the address bar * Open Windows File Explorer and navigate to the folder. * Click in the address bar at the top of the window. * Type cmd and press Enter. &nbsp;&nbsp;&nbsp;Mac Locate and open the folder you want to use in Finder. If you don’t see the path bar at the bottom of the Finder window, go to View &gt; Show Path Bar. In the path bar, right-click (or Control-click) the folder. Select Open in Terminal 5.2 Opening your folder from the terminal If you are working in the Terminal and want to open your folder in your file explorer, type open . (Mac) or start . (Windows) 5.3 Commenting and uncommenting in RStudio To quickly comment or uncomment lines in RStudio, use Command + Shift + C (Mac) or Ctrl + Shift + C (Windows/Linux). "],["installs.html", "6 Installations", " 6 Installations You’ll only need to run these steps once. tets Download and install R here, version 3.6.0 or higher. Follow the instructions for your operating system (Linux/macOS/Windows). &nbsp;&nbsp;&nbsp;Check your R install MacOS Open the program Terminal (installed on Macs by default) and run the command \"R\". An R Console should start and you should be able to start running R commands. If not, your install was unsuccessful. Windows Click the “Start” menu icon in your bottom left of your taskbar (often a window pane). Click “All &gt;” (in the top right of the popup) to see all the programs you have installed. Scroll to the “R” section. If “R X.X.X” (where the Xs indicate the version installed) is present, you installed R properly! If not, your install was unsuccessful. Note: If you have not installed R properly, try deleting your previous attempt, redownloading, and reinstalling. Note: We will not be using the R console (which will open if you try clicking R X.X.X). We will be using RStudio instead. Download and install RStudio here. Scroll down to find downloads for non-macOS. Note: While installing, you may be asked whether to install the 32-bit or 62-bit RStudio version. Download the version that matches your PC. Install Git, if you don’t already have it. Git is a tool that will help us with version control when editing your workshop. Linux and macOS computers generally have Git pre-installed. Windows computers must install Git. However, make sure to double check if you already have Git, so that you don’t have to install it again! Check if you have Git by running this command in terminal/command prompt: git --version ## git version 2.39.5 (Apple Git-154) If your output looks like “git version X.X.X …”, you already have git. Move onto step 4. However, if your output says “Git is not recognized” or a similar statement (such as the one provided below), you do not have Git, so you must install it as well. &#39;git&#39; is not recognized as an internal or external command, operable program or batch file. Installing Git on macOS When you ran git --version, it will have prompted you to install Git. Follow these instructions. Installing Git on Windows Go to the Git for Windows installer and download Git. Then, install it with all the default settings. Click here for instructions on installing Git on Linux. &nbsp;&nbsp;&nbsp;Check your Git install Re-run “git –version” and check that it returns your expected version. (On Windows, this may look like “git version 2.47.1.windows.1”). Note: If you installed Git while having a Command Prompt/Windows PowerShell window open, close this window and open a new one to run “git –version”. This acts as a refresher to Command Prompt/Windows PowerShell. R packages: Open RStudio and run the following commands in the console (bottom left window): Bookdown: install.packages(&quot;bookdown&quot;) Other packages: install.packages(c(&quot;magrittr&quot;, &quot;stringi&quot;, &quot;stringr&quot;, &quot;reticulate&quot;, &quot;tinytex&quot;,&quot;servr&quot;)) You may have to approve some downloads. Say “yes” and enter your password when necessary. This tells bookdown you are okay with downloading and installing these packages in their default locations. Tinytex: tinytex::install_tinytex() "],["local-setup.html", "7 Local Setup and SSH 7.1 GitHub Folder 7.2 SSH Connection", " 7 Local Setup and SSH You’ll only need to do these steps once. 7.1 GitHub Folder Create a folder on your computer to hold all your CBW repos. We recommend placing it in your Documents folder and naming it CBWGithub, but if you’re confident with the command line, you can mix up the name and location. 7.2 SSH Connection We need to create an SSH connection, which is a secure link to GitHub using a cryptographic key instead of a password. It’s a highly secure method that allows you to push and pull code without having to enter your credentials every time. If you’ve already been git cloning, pushing, and pulling, you have your SSH connection set up and can skip this step. You can run the commands in this section from anywhere in your computer - folder does not matter. Output VS Commands in the GitHub Docs Commands are prefixed with a $ to simulate the terminal prompt. This character indicates where a command begins but is not part of the command itself, so do not copy it. Output is prefaced by a “&gt;” sign. 7.2.1 Generate an SSH key This step creates a unique cryptographic key pair that acts as a secure, digital identity for your computer. Mac Windows If you have already created a SSH key and you are asked to rewrite another key, look at the highlighted section here. Before you freak out When typing your passphrase, your computer is so secretive that you won’t see it being typed. You won’t see a cursor moving and you won’t see ● instead of the characters you’re typing. Rest assured, your computer is receiving your text. If you make a mistake, it’s best to hit the “delete” bar many times and retype. 7.2.2 Add your SSH key to the ssh-agent This step loads your private key into a secure background utility so you don’t have to type your passphrase for every connection. Mac Windows 7.2.3 Add your SSH key to your GitHub account This step adds your public key to your GitHub account to authorize your computer, allowing it to access your repositories without a password. Mac Windows "],["create-repo.html", "8 Create your repo 8.1 New repo 8.2 Duplicate existing repo", " 8 Create your repo 8.1 New repo Go to the bookdown template. Click on the “Use this template” green button, which is to the right of the title of the repository “bookdown-template”. Then, press the dropdown option: “Create a new repository”, as seen below. You will be brought to a “Create a new repository” page. Fill out the blanks as follows: Change the owner to “bioinformaticsdotca” Make it public Fill in the repository name with your workshop code (e.g. INR_Mon-2510) &nbsp;&nbsp;&nbsp;See image Click Create Repository. 8.2 Duplicate existing repo If you are repeating a previously offered workshop and know you’ll mostly need to make minor edits, you can create a copy of an existing repo (a process called forking) instead of creating it from scratch. How to Git Fork Go to the pre-existing workshop repository under the bioinformaticsdotca GitHub for the workshop you want to recreate. For example, if we wanted to create a new workshop version of Analysis Using R 2024 (AUR 2024), we would go to this page: &nbsp;&nbsp;&nbsp;See image Click “Fork” as shown below. &nbsp;&nbsp;&nbsp;See image You will be brought to this page. You need to update the following parts: the owner (change to bioinformaticsdotca, as shown), the new repository name (follow CBW Guidelines) and the description. The fork will automatically have “Copy the main branch only”, which it should be (do not deselect this). Then, click the green fork button in the bottom right, as highlighted below. &nbsp;&nbsp;&nbsp;See image You will be brought to your new repository, which will host the copy of the pre-existing workshop. Note When you duplicate an existing workshop, you may be duplicating an older version of the bookdown template and some of its behaviours may differ from those listed in this documentation. "],["configure-details.html", "9 Configure your repo 9.1 A note on repos vs websites", " 9 Configure your repo These steps will auto-configure your workshop with certain variables. Note that this is a one-time process and the configure_workshop.json file will disappear afterwards. Don’t worry - if you have changes (e.g. new faculty) later on, you can always change the website. Open your new repo’s configure_workshop.json file in your browser. &nbsp;&nbsp;&nbsp;See image &lt;br&gt; Click Edit. &nbsp;&nbsp;&nbsp;See image &lt;br&gt; Replace all the variables, then click Commit. &nbsp;&nbsp;&nbsp;See image &lt;br&gt; Click commit changes. &nbsp;&nbsp;&nbsp;See image To check the progress of this configuration, click Actions in the top bar. &nbsp;&nbsp;&nbsp;See image 9.1 A note on repos vs websites An important distinction: GitHub (ex. https://github.com/cbw-dev/bookdown-template) holds your repo, which has version control for all your files. The deployed website (ex. https://cbw-dev.github.io/bookdown-template/) has the workshop online. It looks in the docs folder of your repo for HTML files to display. &nbsp;&nbsp;&nbsp;More details You’ve made a repository that holds what GitHub needs to make our website. When updating the site you’ll edit the markdown (.md) files in the main folder; they’ll be turned into HTML files by the Build action later on. The template has been configured so that these HTML files that make up our website go into a folder called docs. In the next step, we’ll tell GitHub to look at the docs folder to find our website files and make it available to see online (a.k.a deploy it). "],["deploy-website.html", "10 Deploy your site 10.1 Check your deploy and see your website! A very specific build and deployment warning", " 10 Deploy your site In the top navigation bar, select Settings. &nbsp;&nbsp;&nbsp;See image Base repo, pointing at settings Then, go to the Pages sidebar option. &nbsp;&nbsp;&nbsp;See image Selecting pages from the settings page “Deploy from a branch” is already selected, which is what we want. We must change the branch from “none” to “main”. Select the “None” dropdown button and select “main”. &nbsp;&nbsp;&nbsp;See image Change the folder from /root to /docs and press save. &nbsp;&nbsp;&nbsp;See image Great! Now we’re waiting on the page to build and deploy, which should take less than a minute. 10.1 Check your deploy and see your website! To see updates, go to the Actions page (found along the top navigation bar. This will help you understand how the deploy is working, and if it succeeded or failed. &nbsp;&nbsp;&nbsp;See image You can click pages build and deployment for updates. &nbsp;&nbsp;&nbsp;See image A successful deploy will have a green checkmark next to it. You can inspect the 3 steps: build, report-build-status, deploy. Once it’s done deploying, you can find the website at the link provided under the “deploy” step! &nbsp;&nbsp;&nbsp;See image A failed deploy will have a red cross next to it. Clicking through the steps can help you determine what went wrong in the deploy. &nbsp;&nbsp;&nbsp;See image Important! Warning: A website can build properly, but may not deploy properly! It is a good idea to check after making big changes. A very specific build and deployment warning This is a very specific (and unlikely) warning. It occurs when 1 deploy hasn’t finished, but another deploy began. This is a warning message you do not have to worry about! &nbsp;&nbsp;&nbsp;See image "],["faculty-team.html", "11 Faculty team setup", " 11 Faculty team setup Go to the bioinformaticsdotca organization teams page Create a team named as your workshop code (e.g. INR_Mon-2510). Leave all settings as their defaults Add your instructors and TAs to the team. Note that this will send them an email invite that they must accept. On your repo page on GitHub’s website, navigate to Settings &gt; Collaborators and Teams. Click “Add Teams” and select your team. &nbsp;&nbsp;&nbsp;See image Give your team Maintain access Important note on access Do not give direct repository access to individuals! Always use team access. This allows us to better control the security of our repositories. "],["clone.html", "12 Clone to your computer", " 12 Clone to your computer Now that the website is created, let’s bring it to your computer where you can easily make edits. We’ll use the git clone command for this. Navigate to the folder you created in Local Setup using Terminal/Windows PowerShell/Command Prompt. Opening your folder in the command line You can use the cd command to navigate. Some easier options, if you prefer: On Windows Method 1: Shift + Right-click Open Windows File Explorer and navigate to the folder you want to open in the terminal. Hold down the Shift key and right-click on the folder (or an empty area within the folder). Select “Open in Terminal” from the context menu. Method 2: Typing “cmd” in the address bar Open Windows File Explorer and navigate to the folder. Click in the address bar at the top of the window. Type cmd and press Enter. On Mac Locate and open the folder you want to use in Finder. If you don’t see the path bar at the bottom of the Finder window, go to View &gt; Show Path Bar. In the path bar, right-click (or Control-click) the folder. Select Open in Terminal Note that the pwd command gives you the path to your working directory. You may want to use this in your CBWGithub folder and paste the output somewhere where you can quickly find it, so it is easier to navigate to in the future. Get your repo’s SSH URL. Find the ssh for your workshop repository: Click the green button entitled &lt; &gt; Code and see the drop down options. Click the SSH tab, as seen below, and then copy the text below it. The text should be something like git@github.com:bioinformaticsdotca/WORKSHOP-NAME.git, as seen below. &nbsp;&nbsp;&nbsp;See image Edit and run the following command in Terminal/PowerShell/Command Prompt, within the folder you want the workshop folder to be in. (Recall that we navigated there in step 1.) Edit this command! Type “git clone”, paste the SSH url, and then hit enter. The command is below, but you must delete the entire “git@github.com:bioinformaticsdotca/[YOUR WORKSHOP NAME].git” text, and replace it with the text you copied. git clone git@github.com:bioinformaticsdotca/[YOUR WORKSHOP NAME].git You should be ready to go! With your given permissions, you should be able to git push (put your local edits on GitHub) and git pull (pull edits on GitHub to your local computer) fine! "],["finishing-touches.html", "13 Finishing touches 13.1 Oops, I Git Cloned the Wrong Repository!", " 13 Finishing touches Open the .Rproj file in the folder you’ve just downloaded Upload your workshop icon to the img/ folder and any sponsor logos to the img/sponsors folder In _output.yml, replace missingimg.png with your icon’s filename &nbsp;&nbsp;&nbsp;See image In the same _output.yml file, add any sponsors not already included. To do this, copy one of the existing sponsor lines and change each section. Use the height or width attributes to change how large the images are. If two images are small enough and there is no &lt;br&gt; tag in between, they will be displayed side by side like the Genome Canada and Ontario Genomics logos. &nbsp;&nbsp;&nbsp;See image Hit “Build Book” and check preview once complete &nbsp;&nbsp;&nbsp;See image Commit and push Check off all files you want to save to Git in the Git window pane, then click Commit. &nbsp;&nbsp;&nbsp;See image Enter a clear commit message and click Commit. &nbsp;&nbsp;&nbsp;See image Close the confirmation popup and click “Push” to send all files to Github. &nbsp;&nbsp;&nbsp;See image The website takes 1-2 minutes to build after a new push. To check the progress of this action, click Actions in the top bar on Github. &nbsp;&nbsp;&nbsp;See image 13.1 Oops, I Git Cloned the Wrong Repository! That’s okay! To delete the entire local repository and the folder itself, run the following command: rm -fr folder-path where “folder-path” is a file address to the repo that you want to delete. Double check that the path is correct before running this command. "],["whats-next.html", "14 What’s next? 14.1 Homepage 14.2 Faculty pages 14.3 Computing 14.4 Modules 14.5 What if I need to add a new file or change the existing file structure?", " 14 What’s next? Now that you have your repo set up, you can start filling it out! Some of the details you’ll need to include are below. 14.1 Homepage The index.Rmd file creates your landing page, which has a few different components. 14.1.1 Pre-work Uncomment this line and enter the responder link to your pre-work form when ready. 14.1.2 Schedule Your schedule will be created using a special tool. To update the schedule, you’ll update the schedule.csv file. You do not need to edit anything in index.html - the R chunk will create the schedule for you. Open your schedule file in Google Drive. Copy the times and contents of Day 1, excluding headers. If you have multiple time zones, only include one - the utility will auto-calculate other time zones. &nbsp;&nbsp;&nbsp;See image Go to the smart scheduler utility. Select the time zone corresponding to your copied data in the dropdown. If this is a distributed (or virtual) workshop, select other relevant time zones. Select the date of day 1 and paste your copied schedule data. For all other days, click “Add Another Day” and repeat. Click Generate CSV and then Copy to Clipboard. Open schedule.csv, delete all contents, and paste your newly formatted schedule. After your next build, the schedule will be visible on the landing page. 14.1.3 Class photo After you take your class photos, upload them into your Google Drive’s PostWorkshop/ClassPhoto folder. Choose the best one and name it CODE_ClassPhoto (e.g. INR_Mon-2510_ClassPhoto). Make sure its permissions are set to Everyone Can View. Double-click the photo, use the three-dot menu, and click “Open In New Window”. &nbsp;&nbsp;&nbsp;See image Use the three-dot menu and select Embed Item. &nbsp;&nbsp;&nbsp;See image Copy the embed code and paste it below the Class Photo header in your index.Rmd. 14.2 Faculty pages Copy the below code into the 001-faculty.Rmd file and complete for each faculty member. You’ll need to upload their headshots to the img/faculty folder. &lt;img src=&quot;./img/faculty/MISSINGHEADSHOT.PNG&quot; width=&quot;200&quot; alt=&quot;Photo of NAME&quot;&gt; &gt;JOB TITLE &lt;br&gt; INSTITUTION &lt;br&gt; LOCATION &gt; &gt; --- CONTACT INFO, IF PROVIDED BIO GOES HERE 14.3 Computing In 002-computing.Rmd, you’ll include information on your data and computing setup. If your workshop includes compute, add data download links, AWS AMI/Magic Castle instructions, etc. If your workshop does not use compute, remove “And Compute Setup” from the top-level header and delete the Compute Setup section. 14.4 Modules Each of the following files includes module material for the workshop. 14.4.1 Embedding slides Copy the below code chunk and paste into your slide. Replace GOOGLE SLIDES LINK with the URL of your slides up to the word edit/. The /preview in the code chunk will ensure that the slides are formatted for optimal viewing. &lt;iframe src=&quot;GOOGLE SLIDES LINK/preview&quot; width=&quot;640&quot; height=&quot;480&quot; allow=&quot;autoplay&quot;&gt;&lt;/iframe&gt; Ensure the share settings for your slides are set to Everyone Can View. Google Slides allows users to download slide decks in PPTX and PDF formats from the embed view. 14.4.2 Embedding YouTube videos Copy the below code chunk and paste into your slide. Replace YOUTUBE EMBED LINK with the URL of your YouTube video. &lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;YOUTUBE EMBED LINK&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt; 14.4.3 Adding lab material RCs and faculty can add lab material directly into your bookdown website. Use the details in the Formatting section below to include features like code chunks, callouts, and images. 14.5 What if I need to add a new file or change the existing file structure? Bookdown renders the Rmd files in the main repo in alphabetical order, hence the numbers at the beginning of each file. To create a new file, simply name it starting with the numbers that place it where you want it in your output website. For instance, if you wanted to have a new page between modules 2 and 3, you could name your file 0025-mynewfile.Rmd. You can also rename all files or delete them and start over, if you like - this is a suggested structure. --> "],["callouts.html", "15 Callouts 15.1 Basic Syntax 15.2 Attribute Reference 15.3 Default Icons 15.4 Examples 15.5 Nesting Callouts", " 15 Callouts 15.1 Basic Syntax Callouts are created using a fenced div block starting with ::::. :::: {.callout type=&quot;blue&quot; title=&quot;My First Callout&quot;} This is the content of the callout. You can write any Markdown here. :::: My First Callout This is the content of the callout. You can write any Markdown here. Important: Always leave a blank line after the opening :::: {....} line and before the final closing :::: line. The content area inside a callout is standard Markdown. You can include: Paragraphs and line breaks. Bulleted (-) or numbered (1.) lists. Bold and italic text. inline code. Fenced code blocks. Links and images. Even other nested callouts! 15.2 Attribute Reference Customize each callout by adding attributes inside the curly braces {}. Attribute Required? Description Example Values type Yes Sets the color scheme. \"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\", \"gray\" style No Defines the visual style. \"regular\" (default), \"important\", \"subtle\", \"plain\" title No Text for the callout’s title. Can include Markdown. \"Important Note!\", \"**Action Required**\" icon No Controls the icon next to the title. \"true\" (default), \"false\", \"fas fa-rocket\" collapsible No Makes the callout a dropdown. \"true\", \"false\" (default) center_title No Centers the title (static callouts only). \"true\", \"false\" (default) 15.3 Default Icons If you set icon=\"true\" or omit the icon attribute, a default icon will be shown based on the type you’ve chosen. Here are the defaults: type (Color) Default Icon Icon Class (fas fa-...) red triangle-exclamation blue circle-info green circle-check yellow bell purple star orange fire gray comment-dots You can override any of these defaults by specifying a different icon class, for example: icon=\"fas fa-lightbulb\". Find more icons on the Font Awesome website. 15.4 Examples Here are some practical examples you can copy and adapt. 15.4.1 Example 1: Static Informational Note A standard blue callout for providing information. :::: {.callout type=&quot;blue&quot; title=&quot;Information&quot;} This is a standard blue informational callout. The default icon for &#39;blue&#39; will be used. :::: Information This is a standard blue informational callout. The default icon for ‘blue’ will be used. 15.4.2 Example 2: Collapsible “Plain” Answer Box A minimal dropdown, perfect for hiding answers to questions. :::: {.callout type=&quot;green&quot; style=&quot;plain&quot; title=&quot;What is the answer?&quot; icon=&quot;fas fa-question-circle&quot; collapsible=&quot;true&quot;} The answer is revealed here. This plain dropdown uses a green icon because we set `type=&quot;green&quot;`. :::: &nbsp;&nbsp;&nbsp;What is the answer? The answer is revealed here. This plain dropdown uses a green icon because we set type=\"green\". 15.4.3 Example 3: Important Red Warning A high-visibility static callout for critical information. :::: {.callout type=&quot;red&quot; style=&quot;important&quot; title=&quot;CRITICAL WARNING&quot; icon=&quot;fas fa-triangle-exclamation&quot;} System integrity is compromised. Immediate action required. Please check the `error_log.txt` file for details. :::: CRITICAL WARNING System integrity is compromised. Immediate action required. Please check the error_log.txt file for details. 15.4.4 Example 4: Comprehensive Dropdown This example uses multiple attributes and contains rich Markdown content, including a fenced code block. To prevent rendering issues when nesting code blocks, use a longer fence (e.g., five colons :::::) for the outer callout block. :::: {.callout type=&quot;orange&quot; style=&quot;important&quot; title=&quot;**Action Needed**: Review Workflow&quot; icon=&quot;fas fa-clipboard-check&quot; collapsible=&quot;true&quot;} ### Step 1: Data Ingestion Please ensure your data from `source_data/experiment_A.csv` has been correctly loaded. - Check for missing values. - Verify data types. ### Step 2: Pre-processing The pre-processing script `scripts/01_preprocess.R` must be run before analysis. ``` r # Example snippet from the script # source(&quot;scripts/01_preprocess.R&quot;) # processed_data &lt;- preprocess_data(raw_data) ``` ### Step 3: Analysis &amp; Reporting Confirm that the final report `output/final_report.html` has been generated. If you encounter any issues, please refer to the *Troubleshooting Guide* section. :::: &nbsp;&nbsp;&nbsp;Action Needed: Review Workflow Step 1: Data Ingestion Please ensure your data from source_data/experiment_A.csv has been correctly loaded. Check for missing values. Verify data types. Step 2: Pre-processing The pre-processing script scripts/01_preprocess.R must be run before analysis. # Example snippet from the script # source(&quot;scripts/01_preprocess.R&quot;) # processed_data &lt;- preprocess_data(raw_data) Step 3: Analysis &amp; Reporting Confirm that the final report output/final_report.html has been generated. If you encounter any issues, please refer to the Troubleshooting Guide section. 15.5 Nesting Callouts You can nest callouts inside other elements, such as lists, by indenting the entire callout block. To place a callout inside a list item, indent the entire :::: block (including its opening and closing fences and all of its content) by four spaces. 15.5.1 Example of a Nested Callout 1. This is the first item in the list. 2. This is the second item, which will contain a callout. :::: {.callout type=&quot;blue&quot; title=&quot;This is an indented callout&quot;} This entire callout block is indented, making it part of the second list item. - You can have other Markdown elements inside, like this list. - They must also be indented to be part of the callout. :::: 3. This is the third item in the list, appearing after the callout. This is the first item in the list. This is the second item, which will contain a callout. This is an indented callout This entire callout block is indented, making it part of the second list item. You can have other Markdown elements inside, like this list. They must also be indented to be part of the callout. This is the third item in the list, appearing after the callout. "],["bookdown-crash-course.html", "16 Bookdown crash course", " 16 Bookdown crash course Here is a general summary of how Bookdown creates html websites from .Rmd files when you hit Build. Essentially, Knitr renders and runs all the code, and the outputs are converted into markdown. After knitr, we essentially have a bunch of only markdown files. Pandoc translates this markdown into HTML, so that we get a website! It can be helpful to know when and how these packages work, to help debug later on. Note! The Build step is required for changes to be reflected on the website. If you push an update and the site looks the same, you probably forgot to build. "],["opening-your-bookdown-project-in-rstudio.html", "17 Opening your bookdown project in RStudio 17.1 Explaining RStudio 17.2 Build the Book", " 17 Opening your bookdown project in RStudio Enter the folder you git cloned using Finder/File Explorer. It should be titled “[workshop-name]”. Right click on the .Rproj file and press “Open in RStudio”. There is only one file with this file extension. Important! This file is what you will open each time you want to work on this workshop. You must explicitly open the .Rproj file to build properly! A RStudio window should open up and look something like the image below. 17.1 Explaining RStudio In the bottom right, we have all of our files and subfolders. These files will be explained below. This window also contains helpful views, like “Viewer” and “Plots”. We will touch on these later. Try opening index.Rmd: a new pane will open in the top left that shows the contents of index.Rmd. This is where we will be editing our files! Notice the “Knit” button. In the bottom left, we have our console and other debug related windows (such as terminal!). Any code we run will appear in the console. We can access the terminal (just like editing in the Terminal app) under the “Terminal” tab. In your top right, we have a different window with more different views. The most relevant windows to us are the “Build” and the “Git” windows. No Git window? Try closing (and maybe even restarting RStudio) and then reopening it. A “Git” tab should appear to the right of the “Build” tab and to the left of the “Tutorial” tab. 17.2 Build the Book Try pressing “Build Book” within the “Build” window. Your build window is going to fill up with text, and soon, a website is going to pop up in a new window. Note If it’s your first time building, you may have to approve some downloads and installations, like we did in the Install section. By building the book, all of these files are compiled and converted to .html files that create a website. Each time we make local changes to our files and we want them to appear in our website, we need to rebuild the book. Note that each time we build our book, the files we edited will be saved first - we don’t have to save before building. Note By default, RStudio will choose to build “All Formats”: You can choose to only produce a gitbook (the first option). This can be helpful if you are encountering errors claiming that “bookdown::render_book() failed to render the output format ‘bookdown::pdf_book’/bookdown::epub_book’”. Additionally, not producing all output formats can decrease your build time significantly. 17.2.1 Other Ways to Build Your Book Build the book from the R console: bookdown::render_book() Press the keyboard buttons: cmd + shift + B (macOS) OR ctrl + shift + B (windows) 17.2.2 Knit Your Book Building can take a long time. If you are editing just one file, you can press the “Knit” button that is at the top of the window with your file. This will run the code in the page, and show you what that page would look like in the website (as well as saving that file). Note: Other pages in your website will not update. A quicker way to knit is using the keboard controls cmd + shift + K (macOS) OR ctrl + shift + K (Windows) 17.2.3 Knit VS Build Building creates the website using ALL the .Rmd (and other) files. This is why it takes so long. Knitting creates/updates only the .Rmd file you’re currently working in and reruns your code. (Note: You can’t knit a non-.Rmd file!) Before pushing to GitHub, it is a good idea to build, in case of faulty links or small bugs that occur if you only knit or preview. 17.2.4 Preview Your Book If you want live updates to your changes, you can preview the page as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console (in the bottom left window): bookdown::serve_book() But which files do we edit? Well alas, it’s time to discuss the file setup. "],["file-setup.html", "18 File Setup Explanation", " 18 File Setup Explanation Recall: Hence, all the .Rmd files create a page in the produced website. To create more pages, you will be creating more .Rmd files. Here is a tree diagram of the bookdown template setup. (Note that this mimics how RStudio displays the files, if your RStudio shows these template files in a different order, right click your file window and press “Reload”) Note: only relevant files or files you might be concerned about are explained in blue. If there is no explanation, you can safely assume you do not have to worry about it. bookdown-template ├── _404.md # This becomes your 404 page. This is the only file that can become a page that can also be either a .md or .Rmd file! ├── _bookdown.yml # a config file, you most likely won&#39;t have to edit it unless you want additional configuration settings ├── _bookdown_files ├── _main_files └── ... # [in case of confusion: image and pdf output files] ├── _output.yml # a config file, RC/workshop team will have to edit a few things (the workshop name, sponsor images, repo link) ├── .gitignore ├── .Rhistory ├── 010-course-schedule.Rmd # --&gt; &quot;Course Schedule&quot; section ├── 011-content-files.Rmd # --&gt; &quot;Pre-workshop Materials&quot; and &quot;Computing Setup &amp; Downloads&quot; section ├── 012-meet-your-fac.Rmd # --&gt; &quot;Meet Your Faculty&quot; section ├── 020-module-1.Rmd #--&gt; &quot;Module 1&quot;, &quot;Lecture, and &quot;Lab&quot; section ├── 030-module-2.Rmd ├── README.md # README file that has some helpful explanations, consider reading this before starting to edit (along with this documentation!) ├── book.bib # citation file ├── bookdown-template.Rproj # always open this file in RStudio, opening this helps bookdown understand what to build ├── content-files # store all files from your modules here (ex. data sets, empty code worksheets) └── sample-pdf.pdf ├── docs └── ... # html files &amp; other generated content ├── img # folder where you should store all your images ├── bioinformatics.ca-logo.svg ├── faculty # store all images of faculty in this folder ├── michelle-brazas.jpg └── nia-hughes.jpeg ├── favicon.ico └── sponsors # store all sponsor logos/titles in this folder └── Your-Sponsor-Here.svg ├── index.Rmd # landing page --&gt; &quot;Welcome&quot; section ├── packages.bib # R generated citation file ├── preamble.tex └── style.css # css styling options are defined here - feel free to add your own styling features _output.yml &amp; _bookdown.yml 2 important files are the _output.yml files and the _bookdown.yml files. They help tell bookdown what we want and what to do, especially when making our website. You will only have to edit _output.yml a bit. The _output.yml file creates the table of contents/sidebar you see on the left of the workshop. It is written in HTML, which is why it looks so different. There are 3 things either the RC or the workshop team will need to do: Change the workshop name: [YOUR WORKSHOP NAME] on line 7. Add your sponsors: Replace “Your-Sponsor-Here.svg” with the file name of your sponsors name/logo. Remember to place these files inside the ./img/sponsors/ folder. Replace your workshop repo edit link. This allows users to suggest edits to your work on GitHub. Follow these instructions (they are also provided in the template). Go to your index.Rmd page on GitHub, Copy and paste the link to it. Copy and paste the link to it, excluding the “index.Rmd” ending. Add /%s to the ending. Replace the above link. Organizing the Table of Contents The order of the sidebar is completely dependent on the alphabetical order of the files (see your bottom right window pane! The order is generally the same as the order shown in the RStudio file window pane. If not, right click the window and press “Reload”). Our template has numbering first, to help ease our understanding and organization of files. The only file without this is index.Rmd, since as the landing page we can not change the file name. index.Rmd The only .Rmd that must have some configuration details is the landing page: index.Rmd. This is what fills up the beginning of the index.Rmd file, surrounded by the ---, which tells bookdown the configuration information. Follow the instructions in the template’s index.Rmd file - you must fill in the title, author, date and url. The description, cover-image and github-repo can be changed, but aren’t mandatory. .Rmd Files Let’s move on to discussing the breakdown of the .Rmd files. Each new page is defined by a new header, which starts with #, each sub-header has increasingly more # symbols (##, ###, and more all create smaller sub-headers). A “main” header only has 1 # symbol. These headers define new pages, as well as the title in the sidebar referring to that page. Hence, if we have multiple “main” headers in 1 .Rmd file, 1 .Rmd file will encode multiple pages. Try to have only 1 single # as a header on one page! (You may get warnings otherwise). However, if a new file only has sub-headers (2 # or more), the sub-header will appear on the page that was defined by the previous .Rmd file (in alphabetical order - see the order of the “File” window pane). In our template, we want the introduction material to appear on the same page. Hence, the introduction files (other than 020-course-schedule.Rmd, which starts the page) all only have sub-headers. Note: Due to this, you may receive this warning: Warning message: In split_chapters(output, gitbook_page, global_numbering, split_by, : You have 6 Rmd input file(s) but only 4 first-level heading(s). Did you forget first-level headings in certain Rmd files? You can ignore this warning message! How to Create a New File You can create new files anywhere. You should only be making new website pages, so you should also only be making .Rmd files. (Creating new .md files in hopes of making a new page usually ends up with weird bugs, stick to .Rmd files). Under the “Files” tab of the lower right window pane, there are many options to modify your files. You can use these buttons instead of your File Explorer. Click “New Blank File”. Click the second dropdown option: R Markdown Give your file a unique name that matches CBW’s Bookdown template file naming convention. That is, “0XX-[description].Rmd”. Decide what X should be depending on where you want the page to show up on your sidebar. Name your file a short but descriptive name, with hyphens (-) to split up words. Start editing your new file in the upper left window! 404 Page That being said, there is one file that can be a markdown (.md) file: the _404.(R)md file. If website user goes to a webpage that belongs to our website but no longer exists, they will get this 404 page instead. Put links to your landing page for your workshop or the bioinformatics.ca homepage here! CBW Organization Folders We want our workshops to be easy to navigate and understand. Hence, images or files that are required for your lessons should be placed in ./img/ and ./content-files/ respectively. Within these files, try creating sub-folders within these folders to help organize groups of files. For example, if you have a bunch of data sets, try creating a “datasets” folder within ./content-files/. Subfolders already exist in ./img: ./img/faculty/ and ./img/sponsors/. Fill these with photos of your faculty and images of the names’/logos’ of your sponsors, respectfully! Bookdown’s Wesbite Building Folders Bookdown makes some folders to store .html files, among other files that help create the website. Hence, you should not (need to) touch: _bookdown_files _main_files docs Debugging Tip: If you do get an error that seems like it’s coming from one of these files, there was probably an error that resulted from bookdown not being able to process something. Double check that your syntax, formatting, file names and related files are correct. Debugging Tip 2: Each time we build, we produce a “docs” folder. If we have already built once, we just add new files to it. HTML files that were produced from .Rmd that were deleted are not removed. Hence, if you see errors from files that no longer exist in your root project folder, try deleting the whole docs folder, and rebuilding. WARNING! If you delete the docs folder, make sure to create an empty file, named \".nojekyll\" and put it inside the /docs folder. R-generated figures will not appear without this. "],["push-to-github-via-rstudio.html", "19 Push to GitHub via RStudio", " 19 Push to GitHub via RStudio Now, we know what our files mean and how to edit them. How do we get this onto GitHub? We can write git commands into our Terminal/Command Prompt, or alternatively (and more easily), RStudio has a built-in git interface. Now, we will be able to see a Git window in the top right. Click “Git” to open this window. Let’s say we only edited index.Rmd, now we see the newly edited files. Changed files that need to be updated on GitHub will show up in this window, like how index.Rmd is seen above. (Do not worry too much about .DS_Store and .gitignore do.) Let’s try to push this change to GitHub. Select all the edited files. Then, click the Commit button, which appears above your selected items. A window pane will appear (shown below). Add a commit message in the corresponding box, and then press commit below it. A new window will show up, detailing your updates. Close this window and then press Push to push your updates to GitHub. Now, we’re done! We should see the updates on GitHub now. Also note, if we ever want to pull updates from GitHub, there is also a Pull button in the Git window within RStudio! Git pushing puts your edits onto GitHub, git pulling takes the edits make on GitHub, and brings them to your local computer. For example, if one of your workshop team members made an edit, you want to have that edit on your computer before you start editing! It’s a good idea to do this (git pull - upper right window, “Pull” button) before you start editing, in case somehow your edits conflicts with their edits. Git pushing will automatically update the website, you can see the updates and progress in the actions window we saw previously. (Check out your website on the web once it’s done deploying!) "]]
