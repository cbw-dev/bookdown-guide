[["index.html", "CBW Bookdown Guide 1 CBW’s Bookdown Documentation", " CBW Bookdown Guide Julia Qiu, Nia Hughes Last Updated: 2025-08-12 1 CBW’s Bookdown Documentation Welcome to CBW’s documentation for creating a workshop website using Bookdown. Bookdown is an R package that is used to build books, and in our case, the websites hosting CBW’s workshops! You will only need to know markdown and whatever coding language you will be using to learn bookdown. Please note: this is the documentation to create a workshop using bookdown. If Jupyter Book suits you better, see here. If you don’t know which one to use, use the following flowchart to help decide: "],["how-bookdown-works-a-primer.html", "2 How Bookdown Works: A Primer", " 2 How Bookdown Works: A Primer Here is a general summary of how Bookdown creates html websites from .Rmd files when you hit Build. Knitr renders and runs all the code, and the outputs are converted into markdown. After knitr, we have a bunch of markdown files. Pandoc translates this markdown into HTML, so that we get a website! It can be helpful to know when and how these packages work to help debug later on. Note! The Build step is required for changes to be reflected on the website. If you push an update and the site looks the same, you probably forgot to build. For more information: For more information, take a look at the Bookdown Crash Course section. "],["rc-cheatsheet.html", "3 RCs: Workshop Setup 3.1 Create your repo on GitHub 3.2 Give your team access 3.3 Set your workshop up locally", " 3 RCs: Workshop Setup This section is a quick reference on setting up GitHub Pages site for workshops. Note that it assumes you’ve already followed the installation instructions. 3.1 Create your repo on GitHub 1. Create your repo Navigate to the bookdown template. Click “Use this template” and then “Create a new repository”. If you don’t see this button, be sure to sign in. 2. Set your details Repo name = workshop code (e.g. INR_Mon-2510) Owner = bioinformaticsdotca Visibility = public All other options = leave as is (defaults are OK) Save 3. Configure your workshop Open workshop_config.json in your browser and replace all variables. Commit. 4. Deploy From your repo on GitHub, go to Settings &gt; Pages Ensure it is set to “Deploy from a branch” Set branch to “main” Change folder to /docs Save! Check deploy by going to Actions 3.2 Give your team access 5. Set up your faculty team On GitHub’s website, go to the bioinformaticsdotca organization teams page Create a team named as your workshop code (e.g. INR_Mon-2510); leave all settings as their defaults Add your instructors and TAs to the team 6. Give repo access On your repo page on GitHub’s website, navigate to Settings &gt; Collaborators and Teams Click “Add Teams” and select your team Give your team Maintain access 3.3 Set your workshop up locally 7. Clone to your computer On your repo page on GitHub’s website, click the green Code button, ensure SSH is selected, and copy the text in the box On your local machine, open your terminal and navigate to the folder where you store your CBW Github repos Run git clone [THE TEXT YOU JUST COPIED] 8. Finishing touches Open the .Rproj file in the folder you’ve just downloaded Upload your workshop icon to the img/ folder and sponsor logos to the img/sponsors/ foldder In _output.yml, replace missingimg.png with your icon’s filename In _output.yml, add sponsors Hit “Build Book” and check preview once complete. Note that you may need to adjust sizing of sponsor logos and build again Commit and push 9. Add content Add your pre-work, schedule, and faculty details. When slides and lab materials are ready, include them in their respective modules. "],["editing-cheatsheet.html", "4 Editing Your Workshop", " 4 Editing Your Workshop If you don’t already have your repo cloned: On your repo page on GitHub’s website, click the green Code button, ensure SSH is selected, and copy the text in the box On your local machine, open your terminal and navigate to the folder where you store your CBW Github repos Run git clone [THE TEXT YOU JUST COPIED] Make any changes you like, but don’t forget: Remember to pull first! Remember to always run git pull before making changes. It doesn’t matter if you do this in RStudio or the command line, but it will save you serious headaches down the road. Click Build to create the HTML files that make up the website Commit and push Your website will be ready in 1-2 minutes For more details on this process, see the Bookdown Crash Course. "],["handy-shortcuts.html", "5 Handy Shortcuts 5.1 Getting to your folder in the terminal 5.2 Opening your folder from the terminal 5.3 Commenting and uncommenting in RStudio", " 5 Handy Shortcuts 5.1 Getting to your folder in the terminal You can use the cd command, or: &nbsp;&nbsp;&nbsp;Windows Method 1: Shift + Right-click * Open Windows File Explorer and navigate to the folder you want to open in the terminal. * Hold down the Shift key and right-click on the folder (or an empty area within the folder). * Select “Open in Terminal” from the context menu. Method 2: Typing “cmd” in the address bar * Open Windows File Explorer and navigate to the folder. * Click in the address bar at the top of the window. * Type cmd and press Enter. &nbsp;&nbsp;&nbsp;Mac Locate and open the folder you want to use in Finder. If you don’t see the path bar at the bottom of the Finder window, go to View &gt; Show Path Bar. In the path bar, right-click (or Control-click) the folder. Select Open in Terminal 5.2 Opening your folder from the terminal If you are working in the Terminal and want to open your folder in your file explorer, type open . (Mac) or start . (Windows) 5.3 Commenting and uncommenting in RStudio To quickly comment or uncomment lines in RStudio, use Command + Shift + C (Mac) or Ctrl + Shift + C (Windows/Linux). "],["faq.html", "6 FAQs 6.1 Why aren’t my changes appearing on the website? 6.2 What are the unusual symbols I’m seeing?", " 6 FAQs 6.1 Why aren’t my changes appearing on the website? There are a few things that could be the cause: You forgot to build your book. Remember that this step is what creates the HTML files for the website. You forgot to commit and push your changes. The build step creates the HTML files, but you need to push them to Github after building - otherwise, they only live on your computer. You just haven’t waited long enough - it takes 1-2 minutes for the site to build. 6.2 What are the unusual symbols I’m seeing? &lt;– –&gt; These are comment tags - they prevent the contents inside them from being displayed. You can either type/delete them manually or use the shortcuts Command + Shift + C (Mac) or Ctrl + Shift + C (Windows). [ ]( ) This is the markdown syntax for a hyperlink. The contents of the square brackets indicate the text to be displayed, and the round brackets contain the link itself. "],["installs.html", "7 Installations", " 7 Installations You’ll only need to run these steps once. Download and install R here, version 3.6.0 or higher. Follow the instructions for your operating system (Linux/macOS/Windows). &nbsp;&nbsp;&nbsp;Check your R install MacOS Open the program Terminal (installed on Macs by default) and run the command \"R\". An R Console should start and you should be able to start running R commands. If not, your install was unsuccessful. Windows Click the “Start” menu icon in your bottom left of your taskbar (often a window pane). Click “All &gt;” (in the top right of the popup) to see all the programs you have installed. Scroll to the “R” section. If “R X.X.X” (where the Xs indicate the version installed) is present, you installed R properly! If not, your install was unsuccessful. Note: If you have not installed R properly, try deleting your previous attempt, redownloading, and reinstalling. Note: We will not be using the R console (which will open if you try clicking R X.X.X). We will be using RStudio instead. Download and install RStudio here. Scroll down to find downloads for non-macOS. Note: While installing, you may be asked whether to install the 32-bit or 62-bit RStudio version. Download the version that matches your PC. Install Git, if you don’t already have it. Git is a tool that will help us with version control when editing your workshop. Linux and macOS computers generally have Git pre-installed. Windows computers must install Git. However, make sure to double check if you already have Git, so that you don’t have to install it again! Check if you have Git by running this command in terminal/command prompt: git --version ## git version 2.39.5 (Apple Git-154) If your output looks like “git version X.X.X …”, you already have git. Move onto step 4. However, if your output says “Git is not recognized” or a similar statement (such as the one provided below), you do not have Git, so you must install it as well. &#39;git&#39; is not recognized as an internal or external command, operable program or batch file. Installing Git on macOS When you ran git --version, it will have prompted you to install Git. Follow these instructions. Installing Git on Windows Go to the Git for Windows installer and download Git. Then, install it with all the default settings. Click here for instructions on installing Git on Linux. &nbsp;&nbsp;&nbsp;Check your Git install Re-run “git –version” and check that it returns your expected version. (On Windows, this may look like “git version 2.47.1.windows.1”). Note: If you installed Git while having a Command Prompt/Windows PowerShell window open, close this window and open a new one to run “git –version”. This acts as a refresher to Command Prompt/Windows PowerShell. R packages: Open RStudio and run the following commands in the console (bottom left window): Bookdown: install.packages(&quot;bookdown&quot;) Other packages: install.packages(c(&quot;magrittr&quot;, &quot;stringi&quot;, &quot;stringr&quot;, &quot;reticulate&quot;, &quot;tinytex&quot;,&quot;servr&quot;, &quot;readr&quot;)) You may have to approve some downloads. Say “yes” and enter your password when necessary. This tells bookdown you are okay with downloading and installing these packages in their default locations. Tinytex: tinytex::install_tinytex() "],["local-setup.html", "8 Local Setup and SSH 8.1 GitHub Folder 8.2 SSH Connection", " 8 Local Setup and SSH You’ll only need to do these steps once. 8.1 GitHub Folder Create a folder on your computer to hold all your CBW repos. We recommend placing it in your Documents folder and naming it CBWGithub, but if you’re confident with the command line, you can mix up the name and location. 8.2 SSH Connection We need to create an SSH connection, which is a secure link to GitHub using a cryptographic key instead of a password. It’s a highly secure method that allows you to push and pull code without having to enter your credentials every time. If you’ve already been git cloning, pushing, and pulling, you have your SSH connection set up and can skip this step. You can run the commands in this section from anywhere in your computer - folder does not matter. Output VS Commands in the GitHub Docs Commands are prefixed with a $ to simulate the terminal prompt. This character indicates where a command begins but is not part of the command itself, so do not copy it. Output is prefaced by a “&gt;” sign. 8.2.1 Generate an SSH key This step creates a unique cryptographic key pair that acts as a secure, digital identity for your computer. Mac Windows If you have already created a SSH key and you are asked to rewrite another key, look at the highlighted section here. Before you freak out When typing your passphrase, your computer is so secretive that you won’t see it being typed. You won’t see a cursor moving and you won’t see ● instead of the characters you’re typing. Rest assured, your computer is receiving your text. If you make a mistake, it’s best to hit the “delete” bar many times and retype. 8.2.2 Add your SSH key to the ssh-agent This step loads your private key into a secure background utility so you don’t have to type your passphrase for every connection. Mac Windows 8.2.3 Add your SSH key to your GitHub account This step adds your public key to your GitHub account to authorize your computer, allowing it to access your repositories without a password. Mac Windows "],["create-repo.html", "9 Create your repo 9.1 Option 1: New repo 9.2 Option 2: Duplicate existing repo", " 9 Create your repo 9.1 Option 1: New repo Go to the bookdown template. Make sure you’re signed into GitHub. Click on the “Use this template” green button, which is to the right of the title of the repository “bookdown-template”. Then, press the dropdown option: “Create a new repository”, as seen below. You will be brought to a “Create a new repository” page. Fill out the blanks as follows: Change the owner to “bioinformaticsdotca” Make it public Fill in the repository name with your workshop code (e.g. INR_Mon-2510) &nbsp;&nbsp;&nbsp;See image Click Create Repository. 9.2 Option 2: Duplicate existing repo If you are repeating a previously offered workshop and know you’ll mostly need to make minor edits, you can create a copy of an existing repo (a process called forking) instead of creating it from scratch. How to Git Fork Go to the pre-existing workshop repository under the bioinformaticsdotca GitHub for the workshop you want to recreate. For example, if we wanted to create a new workshop version of Analysis Using R 2024 (AUR 2024), we would go to this page: &nbsp;&nbsp;&nbsp;See image Click “Fork” as shown below. &nbsp;&nbsp;&nbsp;See image You will be brought to this page. You need to update the following parts: the owner (change to bioinformaticsdotca, as shown), the new repository name (follow CBW Guidelines) and the description. The fork will automatically have “Copy the main branch only”, which it should be (do not deselect this). Then, click the green fork button in the bottom right, as highlighted below. &nbsp;&nbsp;&nbsp;See image You will be brought to your new repository, which will host the copy of the pre-existing workshop. Note When you duplicate an existing workshop, you may be duplicating an older version of the bookdown template and some of its behaviours may differ from those listed in this documentation. "],["configure-details.html", "10 Configure your repo 10.1 A note on repos vs websites", " 10 Configure your repo These steps will auto-configure your workshop with certain variables. Note that this is a one-time process and the configure_workshop.json file will disappear afterwards. Don’t worry - if you have changes (e.g. new faculty) later on, you can always change the website. Open your new repo’s configure_workshop.json file in your browser. &nbsp;&nbsp;&nbsp;See image Click Edit. &nbsp;&nbsp;&nbsp;See image Replace all the variables, then click Commit. &nbsp;&nbsp;&nbsp;See image Click commit changes. &nbsp;&nbsp;&nbsp;See image To check the progress of this configuration, click Actions in the top bar. &nbsp;&nbsp;&nbsp;See image 10.1 A note on repos vs websites An important distinction: GitHub (ex. https://github.com/cbw-dev/bookdown-template) holds your repo, which has version control for all your files. The deployed website (ex. https://cbw-dev.github.io/bookdown-template/) has the workshop online. It looks in the docs folder of your repo for HTML files to display. &nbsp;&nbsp;&nbsp;More details You’ve made a repository that holds what GitHub needs to make our website. When updating the site you’ll edit the markdown (.md) files in the main folder; they’ll be turned into HTML files by the Build action later on. The template has been configured so that these HTML files that make up our website go into a folder called docs. In the next step, we’ll tell GitHub to look at the docs folder to find our website files and make it available to see online (a.k.a deploy it). "],["deploy-website.html", "11 Deploy your site 11.1 Check your deploy and see your website! A very specific build and deployment warning", " 11 Deploy your site In the top navigation bar, select Settings. &nbsp;&nbsp;&nbsp;See image Base repo, pointing at settings Then, go to the Pages sidebar option. &nbsp;&nbsp;&nbsp;See image Selecting pages from the settings page “Deploy from a branch” is already selected, which is what we want. We must change the branch from “none” to “main”. Select the “None” dropdown button and select “main”. &nbsp;&nbsp;&nbsp;See image Change the folder from /root to /docs and press save. &nbsp;&nbsp;&nbsp;See image Great! Now we’re waiting on the page to build and deploy, which should take less than a minute. 11.1 Check your deploy and see your website! To see updates, go to the Actions page (found along the top navigation bar. This will help you understand how the deploy is working, and if it succeeded or failed. &nbsp;&nbsp;&nbsp;See image You can click pages build and deployment for updates. &nbsp;&nbsp;&nbsp;See image A successful deploy will have a green checkmark next to it. You can inspect the 3 steps: build, report-build-status, deploy. Once it’s done deploying, you can find the website at the link provided under the “deploy” step! &nbsp;&nbsp;&nbsp;See image A failed deploy will have a red cross next to it. Clicking through the steps can help you determine what went wrong in the deploy. &nbsp;&nbsp;&nbsp;See image Important! Warning: A website can build properly, but may not deploy properly! It is a good idea to check after making big changes. A very specific build and deployment warning This is a very specific (and unlikely) warning. It occurs when 1 deploy hasn’t finished, but another deploy began. This is a warning message you do not have to worry about! &nbsp;&nbsp;&nbsp;See image "],["faculty-team.html", "12 Faculty team setup", " 12 Faculty team setup Go to the bioinformaticsdotca organization teams page Create a team named as your workshop code (e.g. INR_Mon-2510). Leave all settings as their defaults Add your instructors and TAs to the team. Note that this will send them an email invite that they must accept. On your repo page on GitHub’s website, navigate to Settings &gt; Collaborators and Teams. Click “Add Teams” and select your team. &nbsp;&nbsp;&nbsp;See image Give your team Maintain access Important note on access Do not give direct repository access to individuals! Always use team access. This allows us to better control the security of our repositories. "],["clone.html", "13 Clone to your computer", " 13 Clone to your computer Now that the website is created, let’s bring it to your computer where you can easily make edits. We’ll use the git clone command for this. Navigate to the folder you created in Local Setup using Terminal/Windows PowerShell/Command Prompt. &nbsp;&nbsp;&nbsp;Opening your folder in the command line You can use the cd command to navigate. Some easier options, if you prefer: On Windows Method 1: Shift + Right-click Open Windows File Explorer and navigate to the folder you want to open in the terminal. Hold down the Shift key and right-click on the folder (or an empty area within the folder). Select “Open in Terminal” from the context menu. Method 2: Typing “cmd” in the address bar Open Windows File Explorer and navigate to the folder. Click in the address bar at the top of the window. Type cmd and press Enter. On Mac Locate and open the folder you want to use in Finder. If you don’t see the path bar at the bottom of the Finder window, go to View &gt; Show Path Bar. In the path bar, right-click (or Control-click) the folder. Select Open in Terminal Note that the pwd command gives you the path to your working directory. You may want to use this in your CBWGithub folder and paste the output somewhere where you can quickly find it, so it is easier to navigate to in the future. Get your repo’s SSH URL. Find the ssh for your workshop repository: Click the green button entitled &lt; &gt; Code and see the drop down options. Click the SSH tab, as seen below, and then copy the text below it. The text should be something like git@github.com:bioinformaticsdotca/WORKSHOP-NAME.git, as seen below. &nbsp;&nbsp;&nbsp;See image Edit and run the following command in Terminal/PowerShell/Command Prompt, within the folder you want the workshop folder to be in. (Recall that we navigated there in step 1.) Edit this command! Type “git clone”, paste the SSH url, and then hit enter. The command is below, but you must delete the entire “git@github.com:bioinformaticsdotca/[YOUR WORKSHOP NAME].git” text, and replace it with the text you copied. git clone git@github.com:bioinformaticsdotca/[YOUR WORKSHOP NAME].git You should be ready to go! With your given permissions, you should be able to git push (put your local edits on GitHub) and git pull (pull edits on GitHub to your local computer) fine! "],["finishing-touches.html", "14 Finishing touches 14.1 Oops, I Git Cloned the Wrong Repository!", " 14 Finishing touches Open the .Rproj file in the folder you’ve just downloaded Upload your workshop icon to the img/ folder and any sponsor logos to the img/sponsors folder In _output.yml, replace missingimg.png with your icon’s filename &nbsp;&nbsp;&nbsp;See image In the same _output.yml file, add any sponsors not already included. To do this, copy one of the existing sponsor lines and change each section. Use the height or width attributes to change how large the images are. If two images are small enough and there is no &lt;br&gt; tag in between, they will be displayed side by side like the Genome Canada and Ontario Genomics logos. &nbsp;&nbsp;&nbsp;See image Hit “Build Book” and check preview once complete. Note that you may need to adjust sizing of sponsor logos and build again. &nbsp;&nbsp;&nbsp;See image Commit and push Check off all files you want to save to Git in the Git window pane, then click Commit. &nbsp;&nbsp;&nbsp;See image Enter a clear commit message and click Commit. &nbsp;&nbsp;&nbsp;See image Close the confirmation popup and click “Push” to send all files to Github. &nbsp;&nbsp;&nbsp;See image The website takes 1-2 minutes to build after a new push. To check the progress of this action, click Actions in the top bar on Github. &nbsp;&nbsp;&nbsp;See image 14.1 Oops, I Git Cloned the Wrong Repository! That’s okay! To delete the entire local repository and the folder itself, run the following command: rm -fr folder-path where “folder-path” is a file address to the repo that you want to delete. Double check that the path is correct before running this command. "],["whats-next.html", "15 What’s next? 15.1 Homepage 15.2 Faculty pages 15.3 Computing 15.4 Modules 15.5 Bioschemas 15.6 What if I need to add a new file or change the existing file structure?", " 15 What’s next? Now that you have your repo set up, you can start filling it out! Some of the details you’ll need to include are below. Remember to pull first! Remember to always run git pull before making changes. It doesn’t matter if you do this in RStudio or the command line, but it will save you serious headaches down the road. 15.1 Homepage The index.Rmd file creates your landing page, which has a few different components. 15.1.1 Pre-work Uncomment this line and enter the responder link to your pre-work form when ready. 15.1.2 Schedule Your schedule will be created using a special tool. To update the schedule, you’ll update the schedule.csv file. You do not need to edit anything in index.html - the R chunk will create the schedule for you. Open your schedule file in Google Drive. Copy the times and contents of Day 1, excluding headers. If you have multiple time zones, only include one - the utility will auto-calculate other time zones. &nbsp;&nbsp;&nbsp;See image Go to the smart scheduler utility. Select the time zone corresponding to your copied data in the dropdown. If this is a distributed (or virtual) workshop, select other relevant time zones. Select the date of day 1 and paste your copied schedule data. For all other days, click “Add Another Day” and repeat. Click Generate CSV and then Copy to Clipboard. Open schedule.csv, delete all contents, and paste your newly formatted schedule. After your next build, the schedule will be visible on the landing page. 15.1.3 Class photo After you take your class photos, upload them into your Google Drive’s PostWorkshop/ClassPhoto folder. Choose the best one and name it CODE_ClassPhoto (e.g. INR_Mon-2510_ClassPhoto). Make sure its permissions are set to Everyone Can View. Double-click the photo, use the three-dot menu, and click “Open In New Window”. &nbsp;&nbsp;&nbsp;See image Use the three-dot menu and select Embed Item. &nbsp;&nbsp;&nbsp;See image Copy the embed code and paste it below the Class Photo header in your index.Rmd. You can edit the width and height attributes to change the image dimensions, or delete them entirely to have the image autosized (not recommended for very large images). 15.2 Faculty pages Copy the below code into the 001-faculty.Rmd file and complete for each faculty member. You’ll need to upload their headshots to the img/faculty folder. #### NAME &lt;img src=&quot;./img/faculty/MISSINGHEADSHOT.PNG&quot; width=&quot;200&quot; alt=&quot;Photo of NAME&quot;&gt; &gt;JOB TITLE &lt;br&gt; INSTITUTION &lt;br&gt; LOCATION &gt; &gt; --- CONTACT INFO, IF PROVIDED BIO GOES HERE 15.3 Computing In 002-computing.Rmd, you’ll include information on your data and computing setup. If your workshop includes compute, add data download links, AWS AMI/Magic Castle instructions, etc. If your workshop does not use compute, remove “And Compute Setup” from the top-level header and delete the Compute Setup section. 15.4 Modules Each of the following files includes module material for the workshop. 15.4.1 Embedding slides Copy the below code chunk and paste into your slide. Replace GOOGLE SLIDES LINK with the URL of your slides up to the word edit/. The /preview in the code chunk will ensure that the slides are formatted for optimal viewing. &lt;iframe src=&quot;GOOGLE SLIDES LINK/preview&quot; width=&quot;640&quot; height=&quot;480&quot; allow=&quot;autoplay&quot;&gt;&lt;/iframe&gt; Ensure the share settings for your slides are set to Everyone Can View. Google Slides allows users to download slide decks in PPTX and PDF formats from the embed view. 15.4.2 Embedding YouTube videos On your YouTube video, click Share then Embed. &nbsp;&nbsp;&nbsp;See image Copy the embed code provided. &nbsp;&nbsp;&nbsp;See image Paste into your Bookdown project. Edit code to set width to 640 and height to 360. 15.4.3 Adding lab material RCs and faculty can add lab material directly into your bookdown website. Use the details in the Formatting section below to include features like code chunks, callouts, and images. 15.5 Bioschemas The _bioschemas.html file contains the Bioschemas metadata. It is mostly complete, but you’ll need to update: inLanguage if the language is not English keywords with 3-5 keywords 15.6 What if I need to add a new file or change the existing file structure? Bookdown renders the Rmd files in the main repo in alphabetical order, hence the numbers at the beginning of each file. To create a new file, simply name it starting with the numbers that place it where you want it in your output website. For instance, if you wanted to have a new page between modules 2 and 3, you could name your file 0025-mynewfile.Rmd. You can also rename all files or delete them and start over, if you like - this is a suggested structure. "],["markdown.html", "16 Markdown 16.1 Formatting your content 16.2 Chapters and subheaders 16.3 Parts 16.4 Text Formatting 16.5 Links 16.6 Embedding 16.7 Citations 16.8 Equations 16.9 Theorems and Proofs 16.10 Using HTML", " 16 Markdown 16.1 Formatting your content 16.1.1 Option: Visual R Markdown All our files are made up of code and markdown syntax that becomes formatted into our website. However, if you do not feel comfortable using Markdown (or you just want an easier way to write your pages), see this guide on using Visual R Markdown. It can be significantly easier to use Visual R Markdown, especially for those who are used to working in Google Docs! If you want to use Markdown, a basic syntax guide is provided below. Want more options? Bookdown has thorough documentation for specific elements, customizations, and further explanations. For simple elements, everything is provided below. However, there are many more possibilities with Bookdown! Click here to read more! 16.2 Chapters and subheaders Headers are defined by a # before the title. Subheaders get increasingly more nested as add more # symbols before it. For example, # Hello would create a chapter title like Markdown Options above. Since there is only one # symbol, this would also create a new page. Best Practice For ease of use, include only one chapter title (single #) in each Rmd file. You can include more than one # to nest your headers. For instance, the subheader above is written as: ## Chapters and subheaders 16.2.1 Sub-subheader ### Sub-subheader This is what a sub-subheader with 3 # symbols looks like. You can add as many # symbols as you would like! There is also no limit to the the number of subheaders you can have. An unnumbered subheader Chapters and sections are numbered by default. To un-number a heading, add a {.unnumbered} or the {-} at the end of the heading. For example, the above subheader was written like this: ### An unnumbered subheader {-} 16.3 Parts Notice how index.Rmd in our CBW Bookdown template has # (PART) Introduction {-} (followed by # Welcome). This creates the “Introduction” section on the sidebar. There are already 2 main parts in the template: the introduction and modules sections. If you want to add more parts, simply paste this: # (PART) [Part Title] {-} into a new .Rmd file, at the top of the file, before the main # header for that page/file. Note: If you would like to have a un-numbered part: Use this syntax: # (PART\\*) [Part Title] {-} Another Note: A similar un-numbered part is called an “Appendix” and Bookdown. Like a part, paste # (APPENDIX) [Appendix Name] {-} it above the “main” header you would like it to be before. All subsequent headers will be described via letters rather than numbers. (If your following headers are un-numbered, an Appendix looks the same as an un-numbered part). 16.4 Text Formatting Before we get too deep into formatting possibilities, let’s cover the basics of markdown formatting options. Bold **bolded text** bolded text Italics *italicized text* italicized text Subscript H~2~O H2O Superscript Na^+^ Na+ Footnotes ^[] is the formatting for a footnote. For example Here is a footnote: ^[This is a footnote.]. Here is a footnote: 1. (Scroll to the bottom of this page to see it.) Horizontal Line --- Blockquote &gt; blockquote &gt; &gt; --- someone who blockquotes blockquote — someone who blockquotes You can put emojis to help these standout! For example: ⚠️ Warning: Do not push the big red button. Unordered List - unordered - list - element - cool! unordered list element cool! Warning: Bookdown currently can not render Markdown to-do lists properly. Alternatively, use this tip instead! Ordered List 1. First item 1. a &lt;!-- For nesting inside a list, put 2 tabs before the element --&gt; 2. b 2. Second item 3. Third item First a c d b Second Third Code There are 2 ways to write code: `code` which looks like this: code Or long pieces of code ``` 1 + 1 # a line of code ``` which would render into the following on your website 1 + 1 # a line of code Find more code options and information in the How to Render Code section. 16.5 Links External webpages Links to a webpage are as follows: [Text you want to hyperlink](website link) For example, Click [here](https://bioinformatics.ca/) to see the bioinformatics.ca main page! Click here to see the bioinformatics.ca main page! Other sections within your workshop website Note these steps work for all headers, not just main (#) headers: Label the heading: # Hello world {#nice-label}. If you do not want to include a label, an automatic label is made: # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the header in either 2 ways: If you want the number referring to your header, use: \\@ref(label-name). For example: Please see Citations \\@ref(citations). Please see Citations 16.7. Note: If you use this reference style for an unnumbered header, “??” will be used as the hyperlinked text. If you want a customizable text hyperlink, use the following: See the [Citations](#citations)! See the Citations! 16.6 Embedding Images The basic notation for a file is: ![Alt Text](img/.../...)\\ For example: ![bioinformatics.ca logo](img/bioinformatics_logo.png)\\ Without the backslash “\\” after the last round bracket, the alt text is displayed as a caption. More info is available in the Pandoc documentation here. Best Practice Small images (e.g. sponsor logos, headshots) can be stored in the img folder of your repo, but larger images/files should be stored in your workshop’s Google Drive. To embed, place the full URL to the item in your round brackets: ![CIHR logo](https://drive.google.com/file/d/1CdamnzdoemqFXin4-dkFjORq_qNbUJVG/view?usp=drive_link)\\ If you want to easily annotate and update your images without rebuilding the site every time., consider publishing a Google Drawing. See the Developers’ Guide for instructions. PDFs Inserting PDFs is essentially the same notation as inserting images. The width and height elements are HTML code, and are up to you. ![insert alt text for pdf here](content-files/sample-pdf.pdf){width=100% height=900}\\ Best Practice We included this PDF in the repo’s content-files folder, but for your workshops, we recommend storing all linked/embedded materials in your workshop’s Google Drive for ease of access. In this case, you place the full URL of the file in the round brackets. YouTube Videos YouTube generates HTML code to insert YouTube videos into your pages. Go to the YouTube video you want to embed. Click “Share”, which is below the video. Click the &lt; &gt; Embed symbol. Press copy. Paste the code into your .Rmd file. Edit the width and height options to 640 and 360 respectively. &lt;iframe width=&quot;640&quot; height=&quot;360px&quot; src=&quot;https://www.youtube.com/embed/MwsGSgybBVU?list=PL3izGL6oi0S_e5T8qx-74WRaMR5K5U8V5&quot; title=&quot;Infectious Disease Genomic Epidemiology 2024 | 1: Introduction to Genomic Epidemiology&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&quot; referrerpolicy=&quot;strict-origin-when-cross-origin&quot; allowfullscreen&gt;&lt;/iframe&gt; 16.7 Citations First, tell bookdown your sources. # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) This R code created a file called ‘packages.bib’ (in the bookdown template) which is now filled with a bunch of bibliography entries. ‘book.bib’ also has a manually entered bibliography entry. We must tell bookdown the files with bibliography information via the YAML bibliography key in index.Rmd. A bibliography entry looks like: @type{key, title = {...}, author = {...}, organization = {...}, year = {...}, url = {...}, ... # see more possible fields at https://en.wikipedia.org/wiki/BibTeX } @type refers to what type of source it is (ex. an article, book, manual, …). @key refers to the name we refer to it by in in-text citations. For example, @R-bookdown renders to Xie (2025). Adding square brackets also adds parentheses once it’s rendered: so [@R-bookdown] becomes (Xie 2025). Note: The RStudio Visual Markdown Editor can also make it easier to insert citations! On any page that you cite, a References section will be autogenerated at the bottom of that page (scroll down to see!). Note: When you cite, Bookdown also generates a citation list that it adds at the end of the last page of your website. However, Bookdown does not create a title, so on your very last page, add a # Reference main header. (To avoid having a “2 main headers in the same file” error, create a new .Rmd file with only # Reference). 16.8 Equations Equations are written in latex. You can refer to them with a label you specify after writing it out. \\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} (\\#eq:binom) # the label! \\end{equation} \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{16.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), for example: see Equation \\@ref(eq:binom) becomes “see Equation (16.1)”. The number (16.1) depends on the chapter and the number of equations already in said chapter (the first equation will be numbered [chapter number].1). 16.9 Theorems and Proofs We also have specific syntax for theorems and proofs, for example, this code: ::: {.theorem #tri} For a right triangle, if $c$ denotes the *length* of the hypotenuse and $a$ and $b$ denote the lengths of the **other** two sides, we have $$a^2 + b^2 = c^2$$ ::: Theorem 16.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Labeled theorems can be referenced in text using \\@ref(thm:tri). For example, check out this smart theorem 16.1. Learn more about styling and syntax for theorems and proofs here. 16.10 Using HTML Recall from this diagram that all files are rendered into .html files for the final official website. Both Knitr and Pandoc will ignore HTML code, so if a certain part of Markdown’s formatting isn’t working, or you’re not satisfied with Markdown’s formatting options, use HTML/CSS formatting instead. Here are some examples: Markdown has no formatting options for underlining. Hence, underline text in a .Rmd file with the following HTML syntax: &lt;u&gt; underlined text&lt;/u&gt; underlined text Bookdown currently renders to-do lists incorrectly. Instead, you can use the following HTML code: &lt;div style=&quot;list-style-type: none;&quot;&gt; &lt;label&gt;&lt;input type=&quot;checkbox&quot;&gt; check box&lt;/label&gt;&lt;br&gt; &lt;/div&gt; check box References Xie, Yihui. 2025. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. This is a footnote.↩︎ "],["callouts.html", "17 Callouts 17.1 Basic Syntax 17.2 Attribute Reference 17.3 Default Icons 17.4 Examples 17.5 Nesting Callouts", " 17 Callouts 17.1 Basic Syntax Callouts are created using a fenced div block starting with ::::. :::: {.callout type=&quot;blue&quot; title=&quot;My First Callout&quot;} This is the content of the callout. You can write any Markdown here. :::: My First Callout This is the content of the callout. You can write any Markdown here. Important: Always leave a blank line after the opening :::: {....} line and before the final closing :::: line. The content area inside a callout is standard Markdown. You can include: Paragraphs and line breaks. Bulleted (-) or numbered (1.) lists. Bold and italic text. inline code. Fenced code blocks. Links and images. Even other nested callouts! 17.2 Attribute Reference Customize each callout by adding attributes inside the curly braces {}. Attribute Required? Description Example Values type Yes Sets the color scheme. \"red\", \"blue\", \"green\", \"yellow\", \"purple\", \"orange\", \"gray\" style No Defines the visual style. \"regular\" (default), \"important\", \"subtle\", \"plain\" title No Text for the callout’s title. Can include Markdown. \"Important Note!\", \"**Action Required**\" icon No Controls the icon next to the title. \"true\" (default), \"false\", \"fas fa-rocket\" collapsible No Makes the callout a dropdown. \"true\", \"false\" (default) center_title No Centers the title (static callouts only). \"true\", \"false\" (default) 17.3 Default Icons If you set icon=\"true\" or omit the icon attribute, a default icon will be shown based on the type you’ve chosen. Here are the defaults: type (Color) Default Icon Icon Class (fas fa-...) red triangle-exclamation blue circle-info green circle-check yellow bell purple star orange fire gray comment-dots You can override any of these defaults by specifying a different icon class, for example: icon=\"fas fa-lightbulb\". Find more icons on the Font Awesome website. 17.4 Examples Here are some practical examples you can copy and adapt. 17.4.1 Example 1: Informational Note A subtle blue callout for providing information. :::: {.callout type=&quot;blue&quot; title=&quot;Information&quot; style=&quot;subtle&quot;} This is a blue informational callout using the Subtle styling. The default icon for &#39;blue&#39; will be used. :::: Information This is a blue informational callout using the Subtle styling. The default icon for ‘blue’ will be used. 17.4.2 Example 2: Collapsible “Plain” Answer Box A minimal dropdown, perfect for hiding answers to questions. :::: {.callout type=&quot;green&quot; style=&quot;plain&quot; title=&quot;What is the answer?&quot; icon=&quot;fas fa-question-circle&quot; collapsible=&quot;true&quot;} The answer is revealed here. This plain dropdown uses a green icon because we set `type=&quot;green&quot;`. :::: &nbsp;&nbsp;&nbsp;What is the answer? The answer is revealed here. This plain dropdown uses a green icon because we set type=\"green\". 17.4.3 Example 3: Important Red Warning A high-visibility static callout for critical information. :::: {.callout type=&quot;red&quot; style=&quot;important&quot; title=&quot;CRITICAL WARNING&quot; icon=&quot;fas fa-triangle-exclamation&quot;} System integrity is compromised. Immediate action required. Please check the `error_log.txt` file for details. :::: CRITICAL WARNING System integrity is compromised. Immediate action required. Please check the error_log.txt file for details. 17.4.4 Example 4: Comprehensive Dropdown This example uses multiple attributes and contains rich Markdown content, including a fenced code block. To prevent rendering issues when nesting code blocks, use a longer fence (e.g., five colons :::::) for the outer callout block. :::: {.callout type=&quot;orange&quot; style=&quot;important&quot; title=&quot;**Action Needed**: Review Workflow&quot; icon=&quot;fas fa-clipboard-check&quot; collapsible=&quot;true&quot;} ### Step 1: Data Ingestion Please ensure your data from `source_data/experiment_A.csv` has been correctly loaded. - Check for missing values. - Verify data types. ### Step 2: Pre-processing The pre-processing script `scripts/01_preprocess.R` must be run before analysis. ``` r # Example snippet from the script # source(&quot;scripts/01_preprocess.R&quot;) # processed_data &lt;- preprocess_data(raw_data) ``` ### Step 3: Analysis &amp; Reporting Confirm that the final report `output/final_report.html` has been generated. If you encounter any issues, please refer to the *Troubleshooting Guide* section. :::: &nbsp;&nbsp;&nbsp;Action Needed: Review Workflow Step 1: Data Ingestion Please ensure your data from source_data/experiment_A.csv has been correctly loaded. Check for missing values. Verify data types. Step 2: Pre-processing The pre-processing script scripts/01_preprocess.R must be run before analysis. # Example snippet from the script # source(&quot;scripts/01_preprocess.R&quot;) # processed_data &lt;- preprocess_data(raw_data) Step 3: Analysis &amp; Reporting Confirm that the final report output/final_report.html has been generated. If you encounter any issues, please refer to the Troubleshooting Guide section. 17.5 Nesting Callouts You can nest callouts inside other elements, such as lists, by indenting the entire callout block. To place a callout inside a list item, indent the entire :::: block (including its opening and closing fences and all of its content) by four spaces. 17.5.1 Example of a Nested Callout 1. This is the first item in the list. 2. This is the second item, which will contain a callout. :::: {.callout type=&quot;blue&quot; title=&quot;This is an indented callout&quot;} This entire callout block is indented, making it part of the second list item. - You can have other Markdown elements inside, like this list. - They must also be indented to be part of the callout. :::: 3. This is the third item in the list, appearing after the callout. This is the first item in the list. This is the second item, which will contain a callout. This is an indented callout This entire callout block is indented, making it part of the second list item. You can have other Markdown elements inside, like this list. They must also be indented to be part of the callout. This is the third item in the list, appearing after the callout. "],["render-code.html", "18 Code 18.1 Rendering Code 18.2 Syntax highlighting 18.3 Running code 18.4 Code Chunk Options 18.5 Code Chunks for Code-Generated Figures and Tables", " 18 Code There are many ways to render and compile code using Bookdown. Here are most of the “language engines” (programming languages) available to render, run and compile in Bookdown. names(knitr::knit_engines$get()) ## [1] &quot;awk&quot; &quot;bash&quot; &quot;coffee&quot; &quot;gawk&quot; &quot;groovy&quot; ## [6] &quot;haskell&quot; &quot;lein&quot; &quot;mysql&quot; &quot;node&quot; &quot;octave&quot; ## [11] &quot;perl&quot; &quot;php&quot; &quot;psql&quot; &quot;Rscript&quot; &quot;ruby&quot; ## [16] &quot;sas&quot; &quot;scala&quot; &quot;sed&quot; &quot;sh&quot; &quot;stata&quot; ## [21] &quot;zsh&quot; &quot;asis&quot; &quot;asy&quot; &quot;block&quot; &quot;block2&quot; ## [26] &quot;bslib&quot; &quot;c&quot; &quot;cat&quot; &quot;cc&quot; &quot;comment&quot; ## [31] &quot;css&quot; &quot;ditaa&quot; &quot;dot&quot; &quot;embed&quot; &quot;eviews&quot; ## [36] &quot;exec&quot; &quot;fortran&quot; &quot;fortran95&quot; &quot;go&quot; &quot;highlight&quot; ## [41] &quot;js&quot; &quot;julia&quot; &quot;python&quot; &quot;R&quot; &quot;Rcpp&quot; ## [46] &quot;sass&quot; &quot;scss&quot; &quot;sql&quot; &quot;stan&quot; &quot;targets&quot; ## [51] &quot;tikz&quot; &quot;verbatim&quot; &quot;theorem&quot; &quot;lemma&quot; &quot;corollary&quot; ## [56] &quot;proposition&quot; &quot;conjecture&quot; &quot;definition&quot; &quot;example&quot; &quot;exercise&quot; ## [61] &quot;hypothesis&quot; &quot;proof&quot; &quot;remark&quot; &quot;solution&quot; 18.1 Rendering Code Just rendering code refers to Bookdown formatting code so that our users can view it. The code does not run or compile. An example is shown below. ``` insert code here ``` which appears as insert code here These are called “code chunks”. 18.2 Syntax highlighting Bookdown has syntax highlighting for the languages shown above. To implement this, add the name of the language after the first 3 ` symbols. Note that the language is not case sensitive (so both “r” and “R” would render the same below). For example: ```r x &lt;- 42 x ``` renders into: x &lt;- 42 x Notice that since &lt;- is how to assign values to variables in R, it is highlighted. If we were to replace “r” with a different language, this may not be highlighted (depending if “&lt;-” is a relevant symbol in that language.) 18.3 Running code To have the code actually compile, we need to put “{” and “}” brackets around the language. For example: ```{r} x &lt;- 42 x ``` renders and compiles into: x &lt;- 42 x ## [1] 42 The second bar you see is the output of the R commands. This can be used to create and display images and charts. ```{r fig, out.width=&#39;80%&#39;, fig.asp=.75, fig.align=&#39;center&#39;, fig.alt=&#39;Plot with connected points showing that vapor pressure of mercury increases exponentially as temperature increases.&#39;} par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) ``` renders and compiles into: par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) You can run these “code chunks” without previewing or building the book. To the right of your code chunk, there are 3 symbols (as seen below). The gear symbol opens chunk options. The down arrow symbol runs all previous chunks and the current chunk. This is helpful if previous chunks define a variable that you will need in your current chunk. Note: This means we can use variables from previous chunks. The right-pointing arrow symbol runs the current code chunk. A rectangular box will appear below your code chunk, with the output of your code. Additionally, notice that in your bottom left window, any code you run also runs in your console. Both of these ways of checking your code happen for all languages. Note - if you are previewing your book, you must re-preview it, since running the code becomes the new action for your console instead of previewing the book. If you’re running R, you don’t have to exit the console (we already work in the R console when using Bookdown). However, if you’re running a different language (for example, Python), you will remain in the Python console, and must exit it to run Bookdown commands. You can look online for different ways to exit certain consoles, but generally running “quit” will return you to the R console. Note If you want to run a certain language, you must have the language installed - R and Python are already set up for you. Python relies on the RStudio interface option, reticulate; you can reconfigure this if you’d like. You may have to configure new languages so that they can run in RStudio, but generally, they should be able to run automatically. Now we know how to both render (just show) and compile (see the output) of our code! 18.4 Code Chunk Options Bookdown has options to customize how code appears and what it produces. The typical structure of adding code chunk options is shown below. ```{r, option=VALUE, option=VALUE, ...} code ``` Some common code chunk options are: echo echo=TRUE shows the code output (by default, it is on). echo=FALSE hides the code output. eval eval=TRUE runs the code (default). eval=FALSE skips the chunk and does not execute the code. results results='markup' runs the code (default). results='asis' leaves the output with no additional formatting. results='hide' does not show the output. include include=TRUE includes both the code and the output on your website (default). include=FALSE excludes both the code and the output on your website. Click here to find more code chunk options. 18.5 Code Chunks for Code-Generated Figures and Tables We can use code chunks to help specify certain ways for code-generated figures and tables to appear, and how to link to them. Generally, this will look like: ```{r reference-name, option=VALUE, option=VALUE, ...} code that generates an image/table ``` Then, we can refer to the figure or table generated by the code in this chunk by using \\@ref(fig:reference-name) or \\@ref(tab:chunk-label) For example, an R-generated image can be made using a similar code chunk to the one shown below: See Figure \\@ref(fig:nice-fig). ```{r nice-fig, fig.cap=&#39;Here is a nice figure!&#39;, out.width=&#39;80%&#39;, fig.asp=.75, fig.align=&#39;center&#39;, fig.alt=&#39;Plot with connected points showing that vapor pressure of mercury increases exponentially as temperature increases.&#39;} par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) ``` This renders into: See Figure 18.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 18.1: Here is a nice figure! When you are writing code that generates images, and will produce images that will stay in your folders, make sure it is written to the img/ folder or a subfolder. Here is an example of a table generated by R from a code chunk: Don&#39;t miss Table \\@ref(tab:nice-tab). ```{r nice-tab, tidy=FALSE} knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) ``` This renders into: Don’t miss Table 18.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 18.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 You can find more information on figures and tables in Bookdown here. "],["command-line.html", "19 Command line crash course 19.1 Terminal, Command Prompt and Windows PowerShell 19.2 Common Commands (for us)", " 19 Command line crash course This is for those who have no (or extremely little) experience with the command line. Using the command line, you can use text commands to interact with your computer’s operating system. For us, we will be using it to move around our folders and to git clone our workshop into our computer, so we can work on it using RStudio. 19.1 Terminal, Command Prompt and Windows PowerShell We can use the command line using certain tools and applications. Terminal is a Unix-based (meaning Linux and macOS computer already have it) application that allows you to access the command line. Similarly, Command Prompt (CMD) and Windows PowerShell give access to the command line on Windows computers. However, Terminal, Command Prompt and Windows PowerShell differ in what commands are accepted. The same commands we give to Terminal may not work in Command Prompt and/or Windows PowerShell. &nbsp;&nbsp;&nbsp;What’s the difference between PowerShell and Command Prompt? The Command Prompt is a legacy tool inherited from the days of MS-DOS. It’s a simple shell that’s good for basic system tasks and running batch files. It primarily works with text strings as its input and output. PowerShell, on the other hand, is a more advanced and feature-rich environment. It tends to be more advanced than Command Prompt, and often can accept more commands that are accepted by Terminal than Command Prompt. 19.2 Common Commands (for us) We won’t need to know that many commands, but for easy navigation and understanding, here is what you (generally) need: Note Commands are written below as headers, with an explanation provided beneath. They follow the format: “[Linux Command]” OR “[Windows Command]” pwd OR echo %cd% “pwd” stands for “print working directory”. It is a command that works in Linux and Windows PowerShell. The equivalent in Command Prompt is “echo %cd%”. For example, below our output is where in my folders the current .Rmd file that makes up this website is: pwd ## /Users/nhughes/Documents/CBWGithub/bookdown-guide ls OR dir “ls” is a command that works in Linux and Windows PowerShell. It’s short for “list” and outputs all the files and folders in the directory (folder) you are currently in. (Note: this code only shows 4 files to save space.) ls ## _404.md ## _bookdown_files ## _bookdown.yml ## _main_files A similar command in Command Prompt is dir (short for “directory”), which also outputs the files and folders in your current directory along with timestamps. cd “cd” stands for “change directory”. The command produces no output, but it allows you to go to a different directory than the one you’re currently in. For example, pwd # recall: pwd tells us where we currently are cd img # img is a folder in bookdown-docs echo &quot;now switching directories&quot; # outputs the following string pwd ## /Users/nhughes/Documents/CBWGithub/bookdown-guide ## now switching directories ## /Users/nhughes/Documents/CBWGithub/bookdown-guide/img &nbsp;&nbsp;&nbsp;Tip: Autocomplete Typing “cd” and then hitting the tab key will give you the available directories you can go to from where you are, or what you have currently typed in. If there is only one option, hitting tab will fill in your command with that option. (This works when typing in any file location into your command line, not only using “cd”). On macOS, the terminal will give you a list if there are multiple options. On Windows, both Command Prompt and Windows Powershell will fill in potential options, and you can hit tab multiple times untill you find your desired file destination. File Location Shorthands When referring to file addresses, there are helpful shorthands. Here’s a summary: - . = Current Directory - .. = Parent Directory - ~ = Home Directory Here’s an example (recall that cd produces no output): pwd echo -e # creates a line echo &quot;Current Directory Example&quot; cd . pwd echo -e echo &quot;Parent Directory Example&quot; cd .. pwd echo -e echo &quot;Home Directory Example&quot; cd ~ pwd ## /Users/nhughes/Documents/CBWGithub/bookdown-guide ## ## Current Directory Example ## /Users/nhughes/Documents/CBWGithub/bookdown-guide ## ## Parent Directory Example ## /Users/nhughes/Documents/CBWGithub ## ## Home Directory Example ## /Users/nhughes mkdir “mkdir [directory address]” stands for “make directory”. Essentially, mkdir will make an empty directory (folder) at a specified location. For example: mkdir test would create a folder named “test” in our current directory. The following commands do the same thing. Note: mkdir ./test does the same thing. rmdir “rmdir [directory address]” removes an empty directory. For example, rmdir test would delete the directory we just made. rmdir -r OR rmdir /s “rmdir -r [directory address]” (Terminal &amp; Windows PowerShell) and “rmdir /s [directory address]” removes a directory recursively, meaning it deletes all the contents of the folder as we all as the folder in itself. There is no undo button Be careful! You can not restore a directory you removed using “rmdir” (or a file removed with “rm”). Up [⬆] and Down [⬇] Arrows One of the most useful tips for using the command line is to use your up [↑] and down [↓] arrow keys. Using the up [↑] key gives you the previous commands you typed, and the down [↓] arrow returns you to your earlier commands. "],["bookdown-crash-course.html", "20 Bookdown crash course 20.1 How Bookdown works 20.2 File setup 20.3 Working with your Bookdown project in RStudio 20.4 Explaining RStudio 20.5 Build the Book 20.6 Pushing to GitHub", " 20 Bookdown crash course 20.1 How Bookdown works Here is a general summary of how Bookdown creates html websites from .Rmd files when you hit Build. Essentially, Knitr renders and runs all the code, and the outputs are converted into markdown. After knitr, we essentially have a bunch of only markdown files. Pandoc translates this markdown into HTML, so that we get a website! It can be helpful to know when and how these packages work, to help debug later on. Note! The Build step is required for changes to be reflected on the website. If you push an update and the site looks the same, you probably forgot to build. 20.2 File setup All .Rmd files create a page in the produced website. To create more pages, you will be creating more .Rmd files. Here is a tree diagram of the bookdown template setup. Note: only relevant files or files you might be concerned about are explained in blue. If there is no explanation, you can safely assume you do not have to worry about it. bookdown-template ├── _404.md # This becomes your 404 page. This is the only file that can become a page that can also be either a .md or .Rmd file! ├── _bioschemas.html # contains the Bioschemas metadata used by websites like TeSS ELIXIR ├── _bookdown.yml # a config file - you most likely won&#39;t have to edit it unless you want additional configuration settings ├── _bookdown_files ├── _main_files └── ... # output figures for certain formats ├── _output.yml # a config file - RC will edit it to include sponsors and workshop icon ├── .github └── ... ├── .git └── ... ├── .gitignore ├── .Rhistory ├── 001-faculty.Rmd # --&gt; faculty bios ├── 002-computing.Rmd # --&gt; computing setup and downloads ├── 010-module 1.Rmd # --&gt; module 1 material ├── 020-module-2.Rmd ├── 030-module-3.Rmd ├── 040-module-4.Rmd ├── 404.html # Rendered 404 page ├── README.md # README file - this directs people looking at the GitHub repo to the rendered site ├── book.bib # citation file ├── callouts.lua # Lua filter that defines the callout options ├── cbw-workshop-year.html ├── {{CODE}}.Rproj # always open this file in RStudio when starting to edit! ├── content-files # store all files from your modules here (ex. data sets, empty code worksheets) └── sample-pdf.pdf ├── docs └── ... # html files &amp; other generated content ├── fa-header.html ├── img # folder where you should store all your images ├── bioinformatics.ca-logo.svg ├── faculty # store all images of faculty in this folder ├── michelle-brazas.jpg └── nia-hughes.jpeg ├── favicon.ico # thumbnail image for website in tab └── sponsors # store all sponsor logos/titles in this folder └── Your-Sponsor-Here.svg ├── index.Rmd # landing page ├── packages.bib # R generated citation file ├── preamble.tex ├── README.html # rendered readme file ├── schedule.csv # contents of your schedule on the landing page; formatted by smart-scheduler utility ├── style.css # css styling options are defined here - feel free to add your own styling features └── workshop_config.json # used to configure your website. Note that this file will disappear after use _output.yml &amp; _bookdown.yml 2 important files are the _output.yml files and the _bookdown.yml files. They help tell bookdown what we want and what to do, especially when making our website. RCs will only have to edit _output.yml a bit. The _output.yml file creates the table of contents/sidebar you see on the left of the workshop. It is written in HTML, which is why it looks so different. There are 2 things either the RC or the workshop team will need to do: Add your workshop icon Add your sponsors Organizing the TOC: .Rmd files The order of the sidebar is completely dependent on the alphabetical order of the files. Our template has Rmd files starting with numbers to make this easy. The only file without this is index.Rmd, since as the landing page we can not change the file name. index.Rmd The only .Rmd that must have some configuration details is the landing page: index.Rmd. This is what fills up the beginning of the index.Rmd file, surrounded by the ---, which tells bookdown the configuration information. The contents of this file after the configuration block make up your homepage. All other .Rmd files Let’s move on to discussing the breakdown of the .Rmd files. Each new page is defined by a new header, which starts with #; each sub-header has increasingly more # symbols (##, ###, and more all create smaller sub-headers). A “main” header only has 1 # symbol. These headers define new pages, as well as the title in the sidebar referring to that page. Hence, if we have multiple “main” headers in 1 .Rmd file, 1 .Rmd file will encode multiple pages. Try to have only 1 single # as a header on one page - you may get warnings otherwise. However, if a new file only has sub-headers (2 # or more), the sub-header will appear on the page that was defined by the previous .Rmd file (in alphabetical order - see the order of the “File” window pane). Note: Due to this, you may receive this warning: Warning message: In split_chapters(output, gitbook_page, global_numbering, split_by, : You have 6 Rmd input file(s) but only 4 first-level heading(s). Did you forget first-level headings in certain Rmd files? You can ignore this warning message. How to create a new file You can create new files anywhere. You should only be making new website pages, so you should also only be making .Rmd files. (Creating new .md files in hopes of making a new page usually ends up with weird bugs - stick to .Rmd files). Under the “Files” tab of the lower right window pane, there are many options to modify your files. You can use these buttons instead of your File Explorer. Click “New Blank File”. Click the second dropdown option: R Markdown Give your file a unique name that matches CBW’s Bookdown template file naming convention, that is, “00XX-[description].Rmd”. Decide what X should be depending on where you want the page to show up on your sidebar. Name your file a short but descriptive name, with hyphens (-) to split up words. Start editing your new file in the upper left window. 404 page That being said, there is one file that can be a markdown (.md) file: the _404.(R)md file. If website user goes to a webpage that belongs to our website but no longer exists, they will get this 404 page instead. Folders We want our workshops to be easy to navigate and understand. Images or files that are required for your lessons should be placed in ./img/ and ./content-files/ respectively. Within these files, try creating sub-folders within these folders to help organize groups of files. For example, if you have a bunch of data sets, try creating a “datasets” folder within ./content-files/. Subfolders already exist in ./img: ./img/faculty/ and ./img/sponsors/. Best Practice You can store small files like icons/headshots/generated plots in GitHub folders, but we recommend storing all other linked/embedded materials in your workshop’s Google Drive for ease of access and organization. Bookdown’s website building folders Bookdown makes some folders to store .html files, among other files that help create the website. Hence, you should not need to touch: _bookdown_files _main_files docs Debugging Tips Debugging Tip 1: If you do get an error that seems like it’s coming from one of these files, there was probably an error that resulted from bookdown not being able to process something. Double check that your syntax, formatting, file names and related files are correct. Debugging Tip 2: Each time we build, we produce a “docs” folder. If we have already built once, we just add new files to it. HTML files that were produced from .Rmd that were deleted are not removed. Hence, if you see errors from files that no longer exist in your root project folder, try deleting the whole docs folder, and rebuilding. Warning! If you delete the docs folder, make sure to create an empty file, named \".nojekyll\" and put it inside the /docs folder. R-generated figures will not appear without this. 20.3 Working with your Bookdown project in RStudio 20.3.1 Opening your Bookdown project Enter the folder you git cloned using Finder/File Explorer. Right click on the .Rproj file and press “Open in RStudio”. There is only one file with this file extension. Important! This file is what you will open each time you want to work on this workshop. You must explicitly open the .Rproj file to build properly! A RStudio window should open up and look something like the image below. 20.4 Explaining RStudio In the bottom right, we have all of our files and subfolders. These files will be explained below. This window also contains helpful views, like “Viewer” and “Plots”. We will touch on these later. Try opening index.Rmd: a new pane will open in the top left that shows the contents of index.Rmd. This is where we will be editing our files! Notice the “Knit” button. In the bottom left, we have our console and other debug related windows. Any code we run will appear in the console. We can access the terminal under the “Terminal” tab - this is just like using the Terminal app. In your top right, we have another pane with multiple views. The most relevant windows to us are the “Build” and the “Git” views. No Git window? Try closing and then reopening RStudio. A “Git” tab should appear to the right of the “Build” tab and to the left of the “Tutorial” tab. 20.5 Build the Book Try pressing “Build Book” within the “Build” window. Your build window is going to fill up with text, and soon, a website is going to pop up in a new window. Note If it’s your first time building, you may have to approve some downloads and installations, like we did in the Install section. By building the book, all of these files are compiled and converted to .html files that create a website. Each time we make local changes to our files and we want them to appear in our website, we need to rebuild the book. Note By default, RStudio will choose to build “All Formats”: You can choose to only produce a gitbook (the first option). This can be helpful if you are encountering errors claiming that “bookdown::render_book() failed to render the output format ‘bookdown::pdf_book’/bookdown::epub_book’”. Additionally, not producing all output formats can decrease your build time significantly. 20.5.1 Other Ways to Build Your Book Build the book from the R console: bookdown::render_book() Press the keyboard buttons: cmd + shift + B (macOS) OR ctrl + shift + B (windows) 20.5.2 Knit Your Book Building can take a long time. If you are editing just one file, you can press the “Knit” button that is at the top of the window with your file. This will run the code in the page, and show you what that page would look like in the website (as well as saving that file). A quicker way to knit is using the keyboard controls: cmd + shift + K (macOS) OR ctrl + shift + K (Windows) Note: Other pages in your website will not update. 20.5.3 Knit VS Build Building creates the website using ALL the .Rmd (and other) files. This is why it takes so long. Knitting creates/updates only the .Rmd file you’re currently working in and reruns your code. (Note: You can’t knit a non-.Rmd file!) Before pushing to GitHub, it is a good idea to build, in case of faulty links or small bugs that occur if you only knit or preview. 20.5.4 Preview Your Book If you want live updates to your changes, you can preview the page as you edit the book when you save individual .Rmd files. You can start the server in a work session by using the RStudio add-in “Preview book”, or from the R console (in the bottom left window): bookdown::serve_book() 20.6 Pushing to GitHub Now, we know what our files mean and how to edit them. How do we get this onto GitHub? We can write git commands into our Terminal/Command Prompt, or alternatively (and more easily), RStudio has a built-in git interface. We have a Git window in the top right. Click “Git” to open this window. Changed files that need to be updated on GitHub will show up in this window, like how index.Rmd is seen above. (Do not worry too much about .DS_Store and .gitignore.) Let’s try to push this change to GitHub. Select all the edited files. Click the Commit button, which appears above your selected items. A window pane will appear (shown below). Add a commit message in the corresponding box, and then press commit below it. A new window will show up, detailing your updates. Close this window and then press Push to push your updates to GitHub. Git pushing will automatically update the website - you can see the updates and progress in the actions window we saw previously. (Check out your website on the web once it’s done deploying! It takes approximately 1-2 minutes for the website to rebuild.) Important: git pull You will probably not be the only person working on this repository: others will be pushing changes to GitHub as well. Before you edit your local material, you should always use the Pull button to get those updates. If one of your workshop team members made an edit, you want to have that edit on your computer before you start making changes! Otherwise, that’s how you run into merge conflicts. "],["appendix.html", "21 Appendix: developers’ guide 21.1 GitHub Repo 21.2 Diagram Links", " 21 Appendix: developers’ guide For the developers of this guide, here are helpful sources. 21.1 GitHub Repo The Bookdown Guide is hosted from the cbw-dev/bookdown-guide public repository. 21.2 Diagram Links Many diagrams shown on these docs are in this Google folder. Note: Many explanatory screenshots are currently stored locally in the repository’s subfolders. 21.2.1 How to Publish a Google Drawing Open the drawing. Edit. Tip: Editing size of the Google Drawing is very easy when you drag the diagonal lines in the bottom right corner. To publish, go to “File &gt; Share &gt; Publish to Web &gt; Embed”. Copy the “Medium” (optional) image size HTML code. Paste where you want it to appear in your .Rmd file. Add alt text to the img embed code: Add alt=\"Alt Text\" after src = ... and before &gt;. Tip If you’re putting a screenshot into your Google Drawing, the resolution of the image will look very poor when it is rendered. You can fix this by simply making the image extremely big. "],["references.html", "22 References", " 22 References Xie, Yihui. 2025. Bookdown: Authoring Books and Technical Documents with r Markdown. https://github.com/rstudio/bookdown. "]]
